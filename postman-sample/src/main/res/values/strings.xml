<resources>
    <string name="app_name">Postman Sample</string>

    <string name="btn_show">Show</string>
    <string name="btn_test">Test</string>
    <string name="code_subclass_title">Subclass</string>
    <string name="code_superclass_title">Superclass</string>
    <string name="result_found_parcelable">Found instance</string>
    <string name="result_found_attr_subclass">Subclass attribute has correct value</string>
    <string name="result_found_attr_superclass">Superclass attribute has correct value</string>

    <string name="full_auto_title">Full auto</string>
    <string name="full_auto_result_title">Full auto result</string>
    <string name="full_auto_description">Test Postman where everything is handled by the Postman compiler.</string>
    <string name="full_auto_code_subclass">"@PostmanEnabled
public class Dog extends Animal {
    boolean mHasTail = false;

    // &#8230;

    protected Dog(Parcel in) {
        // Let the superclass handle it's own parceling
        super(in);
        Postman.receive(Dog.class, this, in);
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        // Let the superclass handle it's own parceling
        super.writeToParcel(dest, flags);
        Postman.ship(Dog.class, this, dest, flags);
    }

    // &#8230;

}
"</string>
    <string name="full_auto_code_superclass">"@PostmanEnabled
public abstract class Animal implements Parcelable {
    String mName;

    // &#8230;

    protected Animal(Parcel in) {
        Postman.receive(Animal.class, this, in);
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        Postman.ship(Animal.class, this, dest, flags);
    }

    // &#8230;

}
"</string>

    <string name="semi_auto_title">Semi auto</string>
    <string name="semi_auto_result_title">Semi auto result</string>
    <string name="semi_auto_description">Test Postman where only the subclass is handled by the Postman compiler.\nThe superclass is Parcelable.</string>
    <string name="semi_auto_code_subclass">"@PostmanEnabled
public class Apple extends Fruit {
    boolean mTasty = false;

    // &#8230;

    protected Apple(Parcel in) {
        // Let the superclass handle it's own parceling
        // (which is hand coded)
        super(in);
        Postman.receive(Apple.class, this, in);
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        // Let the superclass handle it's own parceling
        // (which is hand coded)
        super.writeToParcel(dest, flags);
        Postman.ship(Apple.class, this, dest, flags);
    }

    // &#8230;

}
"</string>
    <string name="semi_auto_code_superclass">"public class Fruit implements Parcelable {
    String mColor = "Green";

    // &#8230;

    protected Fruit(Parcel in) {
        mColor = in.readString();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(mColor);
    }

    // &#8230;

}
"</string>

    <string name="manual_title">Manual</string>
    <string name="manual_result_title">Manual result</string>
    <string name="manual_description">Test Postman where only the subclass is handled by the Postman compiler.\nThe superclass is not Parcelable.</string>
    <string name="manual_code_subclass">"@PostmanEnabled
public class Car extends Vehicle implements Parcelable {
    String mColor;

    // &#8230;


    protected Car(Parcel in) {
        Postman.receive(Car.class, this, in);
        // Manually process attributes from the superclass
        // since it is not parcelable
        mType = in.readString();
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        Postman.ship(Car.class, this, dest, flags);
        // Manually process attributes from the superclass
        // since it is not parcelable
        dest.writeString(mType);
    }

    // &#8230;

}
"</string>
    <string name="manual_code_superclass">"public class Vehicle {
    String mType;

    // &#8230;

}
"</string>

    <string name="test_description">Test Postman.</string>
    <string name="test_title">Test</string>
    <string name="test_result_title">Test Results</string>

</resources>
