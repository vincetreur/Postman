{
  "name": "Postman",
  "tagline": "Easy Parceling for Android",
  "body": "Postman\r\n============\r\n\r\nEasy parceling for Android.\r\n\r\nGenerate the boilerplate code that is needed for supporting Parcelable.\r\n\r\nPostman generates the code that you would normally write in the `writeToParcel` and constructor methods.\r\nYou only need to add the `@PostmanEnabled` annotation. And delegate to the `Postman` in your own code.\r\n\r\nYour code is still your own, so you can add your own code around calls to Postman, just like when you would write the parceling code yourself.\r\n\r\n###Third-party classes\r\nIf your models extend classes that are not Postman annotated but are `Parcelable` then you can still use Postman.\r\nJust call your super class so it can do it's own parceling and let Postman do it's job after that.\r\n\r\n```java\r\nimport android.os.Parcel;\r\n\r\nimport com.appsingularity.postman.Postman;\r\nimport com.appsingularity.postman.annotations.PostmanEnabled;\r\n\r\n@PostmanEnabled\r\npublic class Model extends ParcelableThirdPartyClass  {\r\n    // Add your methods and attributes here.\r\n\r\n    protected Model(Parcel in) {\r\n        super(in);\r\n        Postman.receive(Model.class, this, in);\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(Parcel dest, int flags) {\r\n        super.writeToParcel(dest, flags);\r\n        Postman.ship(Model.class, this, dest, flags);\r\n    }\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0;\r\n    }\r\n\r\n    public static final Creator<Model> CREATOR = new Creator<Model>() {\r\n        @Override\r\n        public Model createFromParcel(Parcel in) {\r\n            return new Model(in);\r\n        }\r\n\r\n        @Override\r\n        public Model[] newArray(int size) {\r\n            return new Model[size];\r\n        }\r\n    };\r\n}\r\n```\r\n\r\n### Execute code before or after parceling\r\nWhen you want to run some code before or after parceling (maybe calculate some derived values) then you can do that easily.\r\nJust insert your code around the calls to Postman. \r\n\r\n```java\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport com.appsingularity.postman.Postman;\r\nimport com.appsingularity.postman.annotations.PostmanEnabled;\r\n\r\n@PostmanEnabled\r\npublic class Model implements Parcelable  {\r\n    // Add your methods and attributes here.\r\n\r\n    protected Model(Parcel in) {\r\n        // Insert some code here if you want to\r\n        Postman.receive(Model.class, this, in);\r\n        // Insert some code here if you want to\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(Parcel dest, int flags) {\r\n        // Insert some code here if you want to\r\n        Postman.ship(Model.class, this, dest, flags);\r\n        // Insert some code here if you want to\r\n    }\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0;\r\n    }\r\n\r\n    public static final Creator<Model> CREATOR = new Creator<Model>() {\r\n        @Override\r\n        public Model createFromParcel(Parcel in) {\r\n            return new Model(in);\r\n        }\r\n\r\n        @Override\r\n        public Model[] newArray(int size) {\r\n            return new Model[size];\r\n        }\r\n    };\r\n}\r\n```\r\n\r\n\r\n###ProGuard\r\nPostman plays well with ProGuard. If you use the `postman`-module you don't need to worry about ProGuard & Postman.\r\n\r\n\r\n###Good to know\r\n-  Attributes must be `public`, `protected` or package protected. Private attributes cannot be accessed from the generated code and will not be parcelled.\r\n- `static` attributes are ignored since they belong to the class not the instance.\r\n- `final` attributes are ignored since Postman cannot detect if they are already initialized.\r\n- You can also exclude an attribute by marking it as `transient`.\r\n- Annotation only works on classes, not on interfaces.\r\n- Any attributes that could not be processed are documented in the generated source. \r\n- `serialVersionUID` will be skipped silently.\r\n- Static inner classes are also supported.\r\n\r\n##Supported types\r\nRight now Postman supports:\r\n\r\n- `boolean`, `Boolean`, `boolean[]`, `Boolean[]`, `List<Boolean>` and `ArrayList<Boolean>`\r\n- `char`, `Character`, `char[]`, `Character[]`, `List<Character>` and `ArrayList<Character>`\r\n- `byte`, `Byte`, `byte[]`, `Byte[]`, `List<Byte>` and `ArrayList<Byte>`\r\n- `short`, `Short`, `short[]`, `Short[]`, `List<Short>` and `ArrayList<Short>`\r\n- `int`, `Integer`, `int[]`, `Integer[]`, `List<Integer>` and `ArrayList<Integer>`\r\n- `long`, `Long`, `long[]`, `Long[]`, `List<Long>` and `ArrayList<Long>`\r\n- `float`, `Float`, `float[]`, `Float[]`, `List<Float>` and `ArrayList<Float>`\r\n- `double`, `Double`, `double[]`, `Double[]`, `List<Double>` and `ArrayList<Double>`\r\n- `String`, `String[]`, `List<String>` and `ArrayList<String>`\r\n- `Parcelable`, `Parcelable[]`, `List<Parcelable>` and `ArrayList<Parcelable>`\r\n- `Serializable`, `List<Serializable>` and `ArrayList<Serializable>`\r\n- `Bundle`, `Bundle[]`, `List<Bundle>` and `ArrayList<Bundle>`\r\n- `SparseBooleanArray` and `SparseArray`\r\n- `Map` and `HashMap`, for `Serializable`'s and `Parcelable`'s\r\n\r\n`List` will always be returned as `ArrayList`.\r\n\r\n`Map` will always be returned as `HashMap`.\r\n\r\n\r\nFor Lollipop and higher Postman also supports:\r\n\r\n- `Size` and `SizeF`\r\n- `PersistableBundle`\r\n\r\n\r\n##How to use\r\nConfigure your `build.gradle`\r\n\r\n```groovy\r\nbuildscript {\r\n  dependencies {\r\n    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\r\n  }\r\n}\r\n\r\napply plugin: 'com.neenbedankt.android-apt'\r\n\r\ndependencies {\r\n  compile 'com.appsingularity:postman:1.1.0'\r\n  apt 'com.appsingularity:postman-compiler:1.1.0'\r\n}\r\n```\r\n\r\nAnnotate your model classes and delegate the tedious boilerplate coding to the Postman.\r\n\r\n```java\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport com.appsingularity.postman.Postman;\r\nimport com.appsingularity.postman.annotations.PostmanEnabled;\r\n\r\n@PostmanEnabled\r\npublic class Model implements Parcelable  {\r\n    // Add your methods and attributes here.\r\n\r\n    protected Model(Parcel in) {\r\n        Postman.receive(Model.class, this, in);\r\n    }\r\n\r\n    @Override\r\n    public void writeToParcel(Parcel dest, int flags) {\r\n        Postman.ship(Model.class, this, dest, flags);\r\n    }\r\n\r\n    @Override\r\n    public int describeContents() {\r\n        return 0;\r\n    }\r\n\r\n    public static final Creator<Model> CREATOR = new Creator<Model>() {\r\n        @Override\r\n        public Model createFromParcel(Parcel in) {\r\n            return new Model(in);\r\n        }\r\n\r\n        @Override\r\n        public Model[] newArray(int size) {\r\n            return new Model[size];\r\n        }\r\n    };\r\n}\r\n```\r\n\r\nDon't forget to setup annotation processing in your `build.gradle`.\r\n(See the sample project.)\r\n\r\n\r\n##Yet to do\r\n- Support more attribute types.\r\n- More automated tests.\r\n\r\n#Version\r\n\r\nVersion 1.0.0\r\n- Initial release.\r\n\r\nVersion 1.0.1\r\n- Fixed issue when used in combination with Dagger.\r\n\r\nVersion 1.1.0\r\n- Added support for static inner classes.\r\n- Improved type checking for lists and maps. This may break your build in some cases.\r\n- Removed the need to specify the annotations package as dependency.\r\n- Added more tests.\r\n- Postman produces less console output, max 1 line per class.\r\n- Complete logging is now written (as comments) into the generated class, so you can read it at any time.\r\n\r\n#License\r\n\r\n    Copyright 2016 Vince M. Treur\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}